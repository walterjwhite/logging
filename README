generic logger functionality for all modules in java/modules

1. log level is determined by method visibility (AND if required, the Loggable annotation)
2. aim to keep Logger LOGGER usage to a minimum AND write methods that read as an outline, so when debugging, you can simply look at the method to determine what is going on
3. configure setters and getters at TRACE, AND avoid method names with void set*, get*, or boolean is*

TODO:
1. contextual logging is determined by annotating the class with @ContextualLoggable AND annotating the fields to be included in logging with @ContextualLoggableField.
   due to an underlying change of design, this functionality will currently not work, I thought it would be cleaner to annotate the fields directly to avoid typos in String constants
   consider doing the reflection statically, initialize once and cache the bindings
2. reintroduce limiting the number of arguments logged, for some method calls that take a list, the list could be huge and logging this would just eat up space, does that really provide value?
